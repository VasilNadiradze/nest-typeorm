import { Module } from '@nestjs/common';
import { DatabaseModule } from './database/database.module';
import { ConfigModule } from '@nestjs/config';
import { ItemsModule } from './items/items.module';

@Module({
  imports: [
    /**
     * დავაინსტალირეთ .env ფაილში აღწერილ კონფიგურაციულ პარამეტრებთან 
     * სამუშაო @nestjs/config პაკეტი, რომელიც მოიცავს ConfigModule მოდულს. 
     */
    ConfigModule.forRoot({ isGlobal: true }), // მოდული ხელმისაწვდომია გლობალურად ანუ ყველგან
    DatabaseModule,
    ItemsModule, 
  ],
  exports: [],
  controllers: []
})
export class AppModule {}

/*
  NestJS დაფუძნებულია მოდულარულ არქიტექტურაზე. მოდულარული არქიტექტურა კი, თავის მხრივ, ეფუძნება
  მთლიანი სისტემის პატარა, დამოუკიდებელ კომპონენტებად დაყოფის პრინციპს. თითოეული მოდული ახდენს
  კონკრეტულ ფუნქციონალთან დაკავშირებული ინფრასტრუქტურის ინკაფსულაციას. ასეთი მიდომისას მარტივია კოდის
  ორგანიზება, სიტემა ხდება უფრო მოქნილი, ადვილია ტესტირება, გვეძლევა მოდულების მრავალჯერადად გამოყენების
  საშუალება: საჭირო მოდული შეგვიძლია გამოვიძახოთ ნებისმერ ადგილას.
  
  ძირითადი მოდული : 
  
  app.module.ts ფაილი ხშირად ასოცირდება NestJS აპლიკაციის ცენტრაულ მოდულთან, რომლის სახელიცაა AppModule. 
  ამ მოდულში ხდება სხვა მოდულებისათვის საჭირო კონტროლერების, სერვისების და ა.შ აღწერა.

  დამოკიდებულებათა ინექცია (Dependency Injection) : 
  
  app.module.ts ფაილში არსებულ @Module დეკორატორში ხდება სხვადასხვა დამოკიდებულებების აღწერა. NestJS
  იყენებს დამოკიდებულებათა ინექციას რათა მოხდეს ინფორმაციის გაზიარება აპლიკაციის სხვადსხვა ფრაგმენტებს
  შორის. შესაძლებელია ნებისმიერი კონტროლერის, სერვისის და ა.შ ნებისმიერ სხვა წერილში ინექცია. 

  იმპორტი და ექსპორტი : 
  
  imports განყოფილებაში ხდება იმ სხვა მოდულების იმპორტი, რომლებზეც დამოკიდებულია მიმდინარე მოდული. 
  
  exports განყოფილებაში შესაძლებელია ნებისმიერი კომპონენტი გავხადოთ ხელმისაწვდომი აპლიკაციის სხვა
          კომპონენტებისათვის. 

  კონტროლერები : 
  
  controllers განყოფილებაში ხდება კონტროლერთა იმპორტი და რეგისტრაცია. კონტროლერი არის კონკრეტულ მარშრუტზე
  გაგზავნილი კონკრეტული მოთხოვნების დამმუშავებელი მექანიზმი (დეტალურად : /src/items/items.controller.ts ფაილში).
  
  ჩვენს შემთხვევაში controllers განყოფილება ცარიელია. ეს იმიტომ, რომ ჩვენთვის საჭირო კონტროლერები
  სხვა მოდულებშია აღწერილი და უშუალოდ მათ იმპორტს ვახდენთ app.module.ts ფაილში. 
*/
